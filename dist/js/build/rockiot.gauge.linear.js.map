{"version":3,"sources":["webpack:///./src/components/rockiot.linear.vertical.svg.vue?736a","webpack:///src/components/rockiot.linear.vertical.svg.vue","webpack:///./src/components/rockiot.linear.vertical.svg.vue?4a11","webpack:///./src/components/rockiot.linear.vertical.svg.vue","webpack:///./src/components/rockiot.linear.horizontal.svg.vue?313a","webpack:///src/components/rockiot.linear.horizontal.svg.vue","webpack:///./src/components/rockiot.linear.horizontal.svg.vue?6527","webpack:///./src/components/rockiot.linear.horizontal.svg.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","$attrs","serial","class","size","style","attrs","svgheight","svgwidth","staticClass","offsetX","offsetY","barHeight","pos","animate","needleColor","_l","zone","i","key","zoneHeight","_v","_s","name","units","variation","orientation","precision","animation","oldValue","value","on","$event","staticRenderFns","component","staticStyle","needle","_e","zoneWidth"],"mappings":"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","file":"js/build/rockiot.gauge.linear.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('svg',{ref:_vm.$attrs.serial,class:' rockiot-linear-vertical rockiot-gauge rockiot-gauge-' + _vm.$attrs.size,style:(_vm.$attrs.svgStyle),attrs:{\"height\":_vm.svgheight,\"width\":_vm.svgwidth,\"view-box\":'0 0 ' + _vm.svgwidth + ' ' + _vm.svgheight,\"id\":_vm.$attrs.serial}},[_c('g',{ref:'scale-' + _vm.$attrs.serial,staticClass:\"rockiot-scale\",style:(_vm.scaleStyle),attrs:{\"stroke\":\"red\"}}),_c('rect',{staticClass:\"rockiot-outline \",style:(_vm.fillStyle),attrs:{\"id\":'outline-' + _vm.$attrs.serial,\"x\":_vm.offsetX,\"height\":_vm.svgheight-(_vm.offsetY*2),\"width\":_vm.barHeight,\"y\":_vm.offsetY}}),_c('rect',{staticClass:\"rockiot-fill \",style:(_vm.outlineStyle),attrs:{\"id\":'fill-' + _vm.$attrs.serial,\"x\":_vm.offsetX,\"height\":_vm.pos,\"width\":_vm.barHeight,\"y\":_vm.offsetY}}),_c('rect',{staticClass:\"rockiot-needle\",style:(_vm.animate('y')),attrs:{\"id\":'needle-' + _vm.$attrs.serial,\"height\":\"1\",\"y\":_vm.pos+_vm.offsetY,\"x\":_vm.offsetX,\"width\":_vm.barHeight,\"fill\":_vm.$attrs.needleColor}}),_vm._l((_vm.limitzones),function(zone,i){return [_c('rect',{key:'zone-' + i,staticClass:\"rockiot-zones\",attrs:{\"id\":'zones-' + i + '-' + _vm.$attrs.serial,\"fill\":zone,\"x\":_vm.offsetX-6,\"height\":_vm.zoneHeight,\"width\":5,\"y\":_vm.offsetY+(_vm.zoneHeight*i)}})]})],2),_c('div',{staticClass:\"rockiot-gauge-linear-vertical-output\"},[_c('div',{staticClass:\"rockiot-gauge-linear-vertical-name\"},[_vm._v(\" \"+_vm._s(this.$attrs.name)+\" \"+_vm._s(this.$attrs.units)+\" \")]),_c('div',{class:'rockiot-gauge-value rockiot-gauge-' + _vm.$attrs.variation + '-' + _vm.$attrs.orientation + '-value'},[_c('rockiot-animated-number',{ref:'num_' + this.$attrs.serial,attrs:{\"precision\":_vm.$attrs.precision,\"duration\":_vm.$attrs.animation,\"from\":_vm.oldValue,\"to\":_vm.$attrs.value},on:{\"end\":function($event){_vm.oldValue=_vm.$attrs.value}}})],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <svg :style=\"$attrs.svgStyle\" :class=\"' rockiot-linear-vertical rockiot-gauge rockiot-gauge-' + $attrs.size\" :height=\"svgheight\" :width=\"svgwidth\" :view-box=\"'0 0 ' + svgwidth + ' ' + svgheight\" :ref=\"$attrs.serial\" :id=\"$attrs.serial\">\r\n\r\n            <g class=\"rockiot-scale\" :ref=\"'scale-' + $attrs.serial\" stroke=\"red\" :style=\"scaleStyle\"></g>\r\n\r\n            <rect class=\"rockiot-outline \" :id=\"'outline-' + $attrs.serial\" :style=\"fillStyle\"\r\n                :x=\"offsetX\"\r\n                :height=\"svgheight-(offsetY*2)\"\r\n                :width=\"barHeight\"\r\n                :y=\"offsetY\">\r\n\r\n            </rect>\r\n            <rect class=\"rockiot-fill \" :style=\"outlineStyle\" :id=\"'fill-' + $attrs.serial\"\r\n                :x=\"offsetX\"\r\n                :height=\"pos\"\r\n                :width=\"barHeight\"\r\n                :y=\"offsetY\">\r\n\r\n            </rect>\r\n            <rect :id=\"'needle-' + $attrs.serial\" class=\"rockiot-needle\" :style=\"animate('y')\" height=\"1\"\r\n                :y=\"pos+offsetY\"\r\n                :x=\"offsetX\"\r\n                :width=\"barHeight\" :fill=\"$attrs.needleColor\"/>\r\n\r\n            <template v-for=\"(zone,i) in limitzones\">\r\n                <rect :key=\"'zone-' + i\" class=\"rockiot-zones\" :id=\"'zones-' + i + '-' + $attrs.serial\"\r\n                :fill=\"zone\" \r\n                :x=\"offsetX-6\"\r\n                :height=\"zoneHeight\"\r\n                :width=\"5\"\r\n                :y=\"offsetY+(zoneHeight*i)\"/>    \r\n            </template>\r\n\r\n        </svg>\r\n        <div class=\"rockiot-gauge-linear-vertical-output\">\r\n          <div class=\"rockiot-gauge-linear-vertical-name\">\r\n            {{this.$attrs.name}} {{this.$attrs.units}}\r\n\r\n          </div>\r\n          <div :class=\"'rockiot-gauge-value rockiot-gauge-' + $attrs.variation + '-' + $attrs.orientation + '-value'\">\r\n              <rockiot-animated-number \r\n                :ref=\"'num_' + this.$attrs.serial\" \r\n                :precision=\"$attrs.precision\" \r\n                :duration=\"$attrs.animation\"\r\n                :from=\"oldValue\" \r\n                :to=\"$attrs.value\" \r\n                @end=\"oldValue=$attrs.value\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nexport default {\r\n    name: 'RockiotSvgLinearV',\r\n    data:()=>({\r\n        svgwidth:120,\r\n        svgheight:370,\r\n        offsetX: 20,\r\n        offsetY: 20,\r\n        barHeight: 40,\r\n        scaleY: -20,\r\n        factor: 3.5,\r\n        range: 100,\r\n        svg: null,\r\n        scaleX: 90,\r\n        offsetText: 10,\r\n        pos: 0,\r\n        oldValue: 0,\r\n        aniValue: 0,\r\n        limitzones:null,\r\n        showScale: true\r\n    }),\r\n    computed:{\r\n        scaleStyle(){\r\n            return this.showScale ? 'stroke:' + this.$attrs.scaleColor + ';' : 'display:none;stroke:' + this.$attrs.scaleColor + ';' \r\n        },\r\n        scaleTextColor(){\r\n            if ( this.$attrs.scaleTextColor ){\r\n                return 'fill:' + this.$attrs.scaleTextColor + ';font-size:.8rem;'\r\n            }\r\n        },\r\n        outlineStyle(){\r\n            return 'fill:' + this.$attrs.barColor +';stroke:' + this.$attrs.barBorderColor + ';' + this.animate('height')\r\n        },\r\n        fillStyle(){\r\n            return 'fill:' + this.$attrs.progressColor + ';stroke:transparent;'\r\n        },\r\n        zoneHeight(){\r\n            let height = this.svgheight-(this.offsetY*2)\r\n            return (this.svgheight-(this.offsetY*2))/this.limitzones.length\r\n        }\r\n    },\r\n    watch:{\r\n       \r\n        '$attrs.value'(v){\r\n            if ( parseFloat(v) > parseInt(this.$attrs.max) ){\r\n              this.pos = this.normalize(parseFloat(this.$attrs.max))*this.posFactor\r\n            } else {\r\n              this.pos = (this.normalize(v)-(parseFloat(this.$attrs.min)*-1))*this.posFactor\r\n            }\r\n            this.aniValue = v\r\n        },\r\n        '$attrs'(v){\r\n            if ( v.scale === '0' ){\r\n                this.showScale = false\r\n            } else {\r\n                this.showScale = true\r\n            } \r\n            this.createGauge()\r\n        }\r\n\r\n    },\r\n    methods:{\r\n        normalize(val){\r\n            if ( Number(this.$attrs.min) < 0 ){\r\n\r\n                let n = Number(this.$attrs.max)-(Number(this.$attrs.max)*(((parseFloat(val).toFixed(this.$attrs.precision)-Number(this.$attrs.min))/this.range)*100)/100)\r\n                return n\r\n            } else {\r\n              if ( Number(this.$attrs.min) > 0 ){\r\n                let n = Number(this.$attrs.max)-(Number(this.$attrs.max)*(((val-Number(this.$attrs.min))/this.range)*100)/100)\r\n                return n\r\n              } else {\r\n                return Number(this.$attrs.max)-(Number(this.$attrs.max)*((val/this.range)*100)/100)\r\n              }\r\n            }\r\n\r\n        },\r\n        animate(attr){\r\n            if ( this.$attrs.animation ) {\r\n                return 'transition: ' + attr + ' ' + parseFloat(this.$attrs.animation/1000) + 's linear;'\r\n            }\r\n            return ''\r\n        },\r\n\r\n        gaugeSize(){\r\n            switch(this.$attrs.size){\r\n                case 'md':\r\n                    this.offsetY = 20\r\n                    this.barHeight = 30\r\n                    this.offsetX = (this.svgwidth/2) - (this.barHeight/2)\r\n                    this.scaleY = -25\r\n                    this.scaleX = 70\r\n                    break\r\n                case 'sm':\r\n                    this.offsetY = 20\r\n                    this.barHeight = 10\r\n                    this.offsetX = (this.svgwidth/2) - (this.barHeight/2)\r\n                    this.scaleY = 0\r\n                    this.scaleX = 60\r\n                    break\r\n                case 'lg':\r\n                    this.offsetY = 20\r\n                    this.barHeight = 40\r\n                    this.offsetX = (this.svgwidth/2) - (this.barHeight/2)\r\n                    this.scaleX = 80\r\n                    break\r\n                default:\r\n                    this.offsetY = 20\r\n                    this.barHeight = 30\r\n                    this.offsetX = (this.svgwidth/2) - (this.barHeight/2)\r\n                    this.scaleY = -25\r\n                    this.scaleX = 30\r\n                    break\r\n            }\r\n        },\r\n        setSVGAttributes(elmt, oAtt) {\r\n            for (var prop in oAtt) {\r\n              elmt.setAttributeNS(null, prop, oAtt[prop]);\r\n            }\r\n        },\r\n        createScale(){\r\n            this.svg.scale = this.$refs['scale-' + this.$attrs.serial]\r\n            this.svg.scale.children.length ? this.svg.scale.innerHTML = '' : null\r\n            var NS = \"http://www.w3.org/2000/svg\";\r\n            var height = parseInt(this.svgheight) - (this.offsetY*2)\r\n            var minor = parseInt(this.$attrs.smallscale) ? 10 : 1\r\n            var ticks = parseInt(this.$attrs.ticks)*minor\r\n            var fs =  height / parseInt(this.$attrs.ticks) / minor\r\n            var txt = 0\r\n            for (var n = 0; n <= ticks ; n++) {\r\n                var scaleLine = document.createElementNS(NS, \"line\");\r\n                var h = 15\r\n                if ( minor > 1 ){\r\n                    if ( n % 10 != 0 && n > 0 ){\r\n                        h = 10 \r\n                    } else {\r\n                        h = 15\r\n                    }\r\n                    var xPos = (this.svgwidth/2)\r\n                    var scaleLineObj = {\r\n                        class: \"scale rockiot-scale\",\r\n                        style: this.scaleStyle,\r\n                        x1: this.scaleX,\r\n                        y1: (n*fs) + this.offsetY,\r\n                        x2: this.scaleX + h,\r\n                        y2: (n*fs) + this.offsetY\r\n                    };\r\n                    this.setSVGAttributes(scaleLine, scaleLineObj);\r\n                    this.svg.scale.appendChild(scaleLine);\r\n                } else {\r\n                    var xPos = (this.svgwidth/2)\r\n                    var scaleLineObj = {\r\n                        class: \"scale rockiot-scale\",\r\n                        style: this.scaleStyle,\r\n                        x1: this.scaleX,\r\n                        y1: (n*fs) + this.offsetY,\r\n                        x2: this.scaleX + h,\r\n                        y2: (n*fs) + this.offsetY\r\n                    };\r\n                    this.setSVGAttributes(scaleLine, scaleLineObj);\r\n                    this.svg.scale.appendChild(scaleLine);\r\n                }\r\n               \r\n                var mg = 0\r\n                if ( n === 0 || n === parseInt(this.$attrs.ticks)){\r\n                    mg = 4\r\n                }\r\n                var scaleText = document.createElementNS(NS, \"text\");\r\n                var scaleTextObj = {\r\n                    \"class\": \"scaleNumbersLinear\",\r\n                    style: this.scaleTextColor,\r\n                    x: this.svgwidth-15,\r\n                    y: (n*fs) + this.offsetY + 5,\r\n                }\r\n                this.setSVGAttributes(scaleText, scaleTextObj)\r\n\r\n                var range = parseInt(this.$attrs.max)-parseInt(this.$attrs.min)\r\n                var tick = range/parseInt(this.$attrs.ticks)\r\n                txt = parseInt(this.$attrs.max)-(n*tick)/minor\r\n                if ( n % 10 === 0 || minor === 1){\r\n                    scaleText.textContent = parseInt(txt)\r\n                    this.svg.scale.appendChild(scaleText);\r\n                }\r\n            }\r\n        },\r\n        createGauge(){\r\n            let id = this.$attrs.serial\r\n            var height = parseInt(this.svgheight) - ( this.offsetY*2 )\r\n            this.svg = this.$refs[id]\r\n            this.svg.scale = this.$refs['scale-' + id]\r\n            this.factor = height / (parseInt(this.$attrs.max )-parseInt(this.$attrs.min))\r\n            this.posFactor = height / Number(this.$attrs.max)\r\n            this.gaugeSize()\r\n            if ( parseInt(this.$attrs.value) > parseInt(this.$attrs.max) ){\r\n                this.$attrs.value = 0\r\n            }\r\n            this.range = Number(this.$attrs.max) - Number(this.$attrs.min)\r\n            this.pos = this.normalize(Number(this.$attrs.value)) * this.posFactor\r\n            if ( !! parseInt(this.$attrs.scale) ){\r\n                this.createScale()\r\n            }\r\n            if ( this.$attrs.zones  ){\r\n                this.limitzones = this.$attrs.zones.split(',')\r\n            }\r\n        }\r\n    },\r\n    beforeMount(){\r\n      this.aniValue = parseInt(this.$attrs.value)\r\n    },\r\n    mounted(){\r\n        let id = this.$attrs.serial\r\n        var height = parseInt(this.svgheight) - ( this.offsetY*2 )\r\n        this.svg = this.$refs[id]\r\n        this.svg.scale = this.$refs['scale-' + id]\r\n        this.range = parseInt(this.$attrs.max)-parseInt(this.$attrs.min)\r\n        this.factor = height / (parseInt(this.$attrs.max )-parseInt(this.$attrs.min))\r\n        this.posFactor = height / Number(this.$attrs.max)\r\n        this.gaugeSize()\r\n        \r\n        this.range = Number(this.$attrs.max) - Number(this.$attrs.min)\r\n        this.pos = this.normalize(Number(this.$attrs.value)) * this.posFactor\r\n        if ( !! parseInt(this.$attrs.scale) ){\r\n            this.createScale()\r\n        }\r\n        if ( this.$attrs.zones  ){\r\n            this.limitzones = this.$attrs.zones.split(',')\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./rockiot.linear.vertical.svg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./rockiot.linear.vertical.svg.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./rockiot.linear.vertical.svg.vue?vue&type=template&id=e65f6e08&\"\nimport script from \"./rockiot.linear.vertical.svg.vue?vue&type=script&lang=js&\"\nexport * from \"./rockiot.linear.vertical.svg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"padding-top\":\"1rem\"}},[_c('svg',{ref:_vm.$attrs.serial,class:'typeRange rockiot-gauge rockiot-gauge-' + _vm.$attrs.size,style:(_vm.$attrs.svgStyle),attrs:{\"height\":_vm.svgheight,\"width\":_vm.svgwidth,\"view-box\":'0 0 ' + _vm.svgwidth + ' ' + _vm.svgheight,\"id\":_vm.$attrs.serial}},[_c('g',{ref:'scale-' + _vm.$attrs.serial,staticClass:\"scale\",style:(_vm.scaleStyle),attrs:{\"stroke\":\"red\"}}),_c('rect',{staticClass:\"outline\",style:(_vm.outlineStyle),attrs:{\"id\":'outline-' + _vm.$attrs.serial,\"x\":_vm.offsetX,\"width\":_vm.svgwidth-_vm.offsetX*2,\"height\":_vm.barHeight,\"y\":_vm.offsetY-_vm.barHeight}}),_c('rect',{staticClass:\"fill\",style:(_vm.fillStyle),attrs:{\"id\":'fill-' + _vm.$attrs.serial,\"x\":_vm.offsetX,\"width\":_vm.pos,\"height\":_vm.barHeight,\"y\":_vm.offsetY-_vm.barHeight}}),(_vm.$attrs.needle==='1')?_c('rect',{staticClass:\"needle\",style:(_vm.animate('x')),attrs:{\"id\":'needle-' + _vm.$attrs.serial,\"width\":\"1\",\"x\":this.pos + this.offsetX,\"y\":_vm.offsetY-_vm.barHeight-5,\"height\":_vm.barHeight+10,\"fill\":_vm.$attrs.needleColor}}):_vm._e(),_vm._l((_vm.limitzones),function(zone,i){return [(zone)?_c('rect',{key:'zone-' + i,staticClass:\"rockiot-zones\",attrs:{\"id\":'zones-' + i + '-' + _vm.$attrs.serial,\"fill\":zone,\"x\":_vm.offsetX + (_vm.zoneWidth*i),\"width\":_vm.zoneWidth,\"height\":\"3\",\"y\":_vm.offsetY+1}}):_vm._e()]})],2),_c('div',{staticClass:\"rockiot-gauge-linear-vertical-output\"},[_c('div',{staticClass:\"rockiot-gauge-linear-vertical-name\"},[_vm._v(\" \"+_vm._s(this.$attrs.name)+\" \"+_vm._s(this.$attrs.units)+\" \")]),_c('div',{class:'rockiot-gauge-value rockiot-gauge-' + _vm.$attrs.variation + '-' + _vm.$attrs.orientation + '-value'},[_c('rockiot-animated-number',{ref:'num_' + this.$attrs.serial,attrs:{\"precision\":_vm.$attrs.precision,\"duration\":_vm.$attrs.animation,\"from\":_vm.oldValue,\"to\":_vm.$attrs.value},on:{\"end\":function($event){_vm.oldValue=_vm.$attrs.value}}})],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div style=\"padding-top:1rem;\">\r\n        <svg :style=\"$attrs.svgStyle\" :class=\"'typeRange rockiot-gauge rockiot-gauge-' + $attrs.size\" :height=\"svgheight\" :width=\"svgwidth\" :view-box=\"'0 0 ' + svgwidth + ' ' + svgheight\" :ref=\"$attrs.serial\" :id=\"$attrs.serial\">\r\n\r\n            <g class=\"scale\" :ref=\"'scale-' + $attrs.serial\" stroke=\"red\" :style=\"scaleStyle\"></g>\r\n\r\n            <rect class=\"outline\" :id=\"'outline-' + $attrs.serial\" :style=\"outlineStyle\"\r\n                :x=\"offsetX\"\r\n                :width=\"svgwidth-offsetX*2\"\r\n                :height=\"barHeight\"\r\n                :y=\"offsetY-barHeight\"/>\r\n\r\n            <rect class=\"fill\" :style=\"fillStyle\" :id=\"'fill-' + $attrs.serial\"\r\n                :x=\"offsetX\"\r\n                :width=\"pos\"\r\n                :height=\"barHeight\"\r\n                :y=\"offsetY-barHeight\">\r\n            </rect>\r\n\r\n            <rect v-if=\"$attrs.needle==='1'\" :id=\"'needle-' + $attrs.serial\" class=\"needle\" :style=\"animate('x')\" width=\"1\"\r\n                :x=\"this.pos + this.offsetX\"\r\n                :y=\"offsetY-barHeight-5\"\r\n                :height=\"barHeight+10\" :fill=\"$attrs.needleColor\"/>\r\n\r\n            <template v-for=\"(zone,i) in limitzones\">\r\n                \r\n                <rect v-if=\"zone\" :key=\"'zone-' + i\" class=\"rockiot-zones\" :id=\"'zones-' + i + '-' + $attrs.serial\"\r\n                :fill=\"zone\"\r\n                 :x=\"offsetX + (zoneWidth*i)\"\r\n                :width=\"zoneWidth\"\r\n                height=\"3\"\r\n                :y=\"offsetY+1\"/>\r\n            </template>    \r\n        </svg>\r\n        <div class=\"rockiot-gauge-linear-vertical-output\">\r\n          <div class=\"rockiot-gauge-linear-vertical-name\">\r\n            {{this.$attrs.name}} {{this.$attrs.units}}\r\n          </div>\r\n            <div :class=\"'rockiot-gauge-value rockiot-gauge-' + $attrs.variation + '-' + $attrs.orientation + '-value'\">\r\n                <rockiot-animated-number \r\n                    :ref=\"'num_' + this.$attrs.serial\" \r\n                    :precision=\"$attrs.precision\" \r\n                    :duration=\"$attrs.animation\"\r\n                    :from=\"oldValue\" \r\n                    :to=\"$attrs.value\" \r\n                    @end=\"oldValue=$attrs.value\"/>\r\n            </div>\r\n        </div>\r\n      </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nexport default {\r\n    name: 'RockiotSvgLinearH',\r\n    data:()=>({\r\n        svgwidth:370,\r\n        svgheight:90,\r\n        offsetX: 20,\r\n        offsetY: 60,\r\n        barHeight: 20,\r\n        scaleY: 0,\r\n        range:100,\r\n        factor: 3.5,\r\n        posFactor: 3.5,\r\n        svg: null,\r\n        scaleX: 90,\r\n        offsetText: 10,\r\n        pos: 0,\r\n        snapObject: null,\r\n        aniPos:[0,0],\r\n        oldValue: 0,\r\n        aniValue:0,\r\n        limitzones:null,\r\n        showScale: true\r\n    }),\r\n    computed:{\r\n        scaleStyle(){\r\n            return this.showScale ? 'stroke:' + this.$attrs.scaleColor + ';' : 'display:none;stroke:' + this.$attrs.scaleColor + ';' \r\n        },\r\n        scaleTextColor(){\r\n            return 'fill:' + this.$attrs.scaleTextColor + ';'\r\n        },\r\n        outlineStyle(){\r\n            return 'fill:' + this.$attrs.barColor +';stroke:' + this.$attrs.barBorderColor + ';'\r\n        },\r\n        fillStyle(){\r\n            return 'fill:' + this.$attrs.progressColor + ';stroke:transparent;' + this.animate('width')\r\n        },\r\n        zoneWidth(){\r\n            return (this.svgwidth-this.offsetX*2)/this.limitzones.length\r\n        }\r\n    },\r\n    watch:{\r\n        \r\n        '$attrs.value'(v){\r\n            if ( Number(v) > Number(this.$attrs.max) ){\r\n              v = Number(this.$attrs.max)  \r\n            }\r\n            this.pos = (this.svgwidth-this.offsetX*2)*this.normalize(Number(v))/100\r\n        },\r\n        '$attrs'(v){\r\n            \r\n            if ( v.scale === '0' ){\r\n                this.showScale = false\r\n            } else {\r\n                this.showScale = true\r\n            }          \r\n            this.createGauge()\r\n\r\n        }\r\n    },\r\n    methods:{\r\n        calcWidth(v){\r\n            if ( Number(v) > Number(this.$attrs.max) ){\r\n              v = Number(this.$attrs.max)  \r\n            }\r\n            this.pos = (this.svgwidth-this.offsetX*2)*this.normalize(Number(v))/100\r\n        },\r\n        normalize(val){\r\n            return (val + (parseInt(this.$attrs.min)*-1))/(this.range)*100\r\n        },\r\n        animate(attr){\r\n            if ( this.$attrs.animation ) {\r\n                return 'transition: ' + attr + ' ' + parseFloat(this.$attrs.animation/1000) + 's linear;'\r\n            }\r\n            return ''\r\n        },\r\n        gaugeSize(){\r\n            switch(this.$attrs.size){\r\n                case 'md':\r\n                    this.offsetX = 20\r\n                    this.offsetY = 70\r\n                    this.barHeight = 25\r\n                    this.scaleY = -15\r\n                    break\r\n                case 'sm':\r\n                    this.offsetX = 20\r\n                    this.offsetY = 70\r\n                    this.barHeight = 10\r\n                    this.scaleY = 0\r\n                    break\r\n                case 'lg':\r\n                    this.offsetX = 20\r\n                    this.offsetY = 85\r\n                    this.barHeight = 40\r\n                    this.scaleY = -30\r\n                    break\r\n                default:\r\n                    this.offsetX = 20\r\n                    this.offsetY = 70\r\n                    this.barHeight = 25\r\n                    this.scaleY = -15\r\n                    break\r\n            }\r\n\r\n        },\r\n        setSVGAttributes(elmt, oAtt) {\r\n            for (var prop in oAtt) {\r\n              elmt.setAttributeNS(null, prop, oAtt[prop]);\r\n            }\r\n        },\r\n        createScale(){\r\n            if ( this.showScale ){\r\n               \r\n                this.svg.scale = this.$refs['scale-' + this.$attrs.serial]\r\n                this.svg.scale.children.length ? this.svg.scale.innerHTML = '' : null\r\n                var data = this.$attrs\r\n                var NS = \"http://www.w3.org/2000/svg\";\r\n                var width = parseInt(this.svgwidth) - this.offsetX - this.offsetX\r\n                var fs =  width / parseInt(this.$attrs.ticks) / 10\r\n                var n = 0;\r\n                var txt = 0\r\n                for (var sa = 0; n <= parseInt(this.$attrs.ticks)*10 ; sa += fs) {\r\n                    var scaleLine = document.createElementNS(NS, \"line\");\r\n                    var h = 5\r\n                    var classe = 'scale scale-major-ticks'\r\n\r\n                    if ( !! parseInt(this.$attrs.smallscale) ){\r\n                        if ( n % 10 != 0 && n > 0 ){\r\n                            classe = 'scale scale-minor-ticks'    \r\n                            h = 0\r\n                            var scaleLineObj = {\r\n                                class: classe,\r\n                                style: this.scaleStyle,\r\n                                x1: sa + this.offsetX,\r\n                                y1: this.offsetY ,\r\n                                x2: sa + this.offsetX,\r\n                                y2: this.offsetY -20 - h + this.scaleY\r\n                            }\r\n                            this.setSVGAttributes(scaleLine, scaleLineObj);\r\n                            this.svg.scale.appendChild(scaleLine);\r\n                        } \r\n                    } \r\n                    if ( n % 10 === 0 || n === 0 ){\r\n                        var scaleLineObj = {\r\n                                class: classe,\r\n                                style: this.scaleStyle,\r\n                                x1: sa + this.offsetX,\r\n                                y1: this.offsetY ,\r\n                                x2: sa + this.offsetX,\r\n                                y2: this.offsetY -20 - h + this.scaleY\r\n                            }\r\n                            this.setSVGAttributes(scaleLine, scaleLineObj);\r\n                            this.svg.scale.appendChild(scaleLine);\r\n                    }\r\n                   \r\n\r\n                    if ( n % 10 === 0 || n === 0 ){\r\n\r\n                        var mg = 0\r\n                        if ( n === 0 || n === parseInt(this.$attrs.ticks)){\r\n                            mg = 4\r\n                        }\r\n                        var scaleText = document.createElementNS(NS, \"text\");\r\n                        var scaleTextObj = {\r\n                            \"class\": \"scaleNumbersLinear\",\r\n                            stroke: 'transparent',\r\n                            style: this.scaleTextColor,\r\n                            x: sa + this.offsetX,\r\n                            y: this.offsetY - 30 + this.scaleY,\r\n                        }\r\n                        this.setSVGAttributes(scaleText, scaleTextObj)\r\n                        //var range = parseInt(this.$attrs.max)-(parseInt(this.$attrs.min))\r\n\r\n                        var tick = this.range/(parseInt(this.$attrs.ticks))\r\n                        txt = parseInt(this.$attrs.min)+(n/10*tick)\r\n\r\n                            scaleText.textContent = parseInt(txt)\r\n                            this.svg.scale.appendChild(scaleText);\r\n\r\n                    }\r\n                    n++\r\n                }\r\n            }\r\n        },\r\n        createGauge(){\r\n            let id = this.$attrs.serial\r\n            this.aniValue = parseInt(this.$attrs.value)\r\n            if ( this.$attrs.variation === 'linear' && this.$attrs.svgwidth > this.$attrs.svgheight ){\r\n                this.svgwidth = this.$attrs.svgwidth\r\n                this.svgheight = this.$attrs.svgheight\r\n            }\r\n            if ( this.$attrs.svgwidth > this.$attrs.svgheight ){\r\n                this.svgwidth = this.$attrs.svgheight\r\n                this.svgheight = this.$attrs.svgwidth\r\n            }\r\n            var width = parseInt(this.svgwidth) - ( this.offsetX*2 )\r\n            \r\n            //this.svgwidth = document.getElementById(this.$attrs.serial).clientWidth - this.offsetX*2\r\n            //width = this.svgwidth\r\n            this.svg = this.$refs[id]\r\n            this.svg.scale = this.$refs['scale-' + id]\r\n            this.posFactor = width / parseInt(this.$attrs.max )\r\n            this.range = parseInt(this.$attrs.max ) - (parseInt(this.$attrs.min))\r\n            this.factor = width / this.range\r\n            if ( parseInt(this.$attrs.value) > parseInt(this.$attrs.max) ){\r\n                this.$attrs.value = this.$attrs.max\r\n            }\r\n            //this.pos = this.normalize(Number(this.$attrs.value))*this.posFactor\r\n            //this.pos = this.svgwidth*this.normalize(Number(this.$attrs.value))/100 - this.offsetX\r\n            this.gaugeSize()\r\n            if ( !! parseInt(this.$attrs.scale) ){\r\n                this.createScale()\r\n            }\r\n            if ( this.$attrs.zones.split(',') ){\r\n                this.limitzones = this.$attrs.zones.split(',')\r\n            }\r\n\r\n            this.aniPos[1] = this.pos//this.factor\r\n            this.calcWidth(this.$attrs.value)\r\n        }\r\n    },\r\n    beforeMount(){\r\n      this.aniValue = parseInt(this.$attrs.value)\r\n\r\n    },\r\n    mounted(){\r\n        let id = this.$attrs.serial\r\n        this.aniValue = parseInt(this.$attrs.value)\r\n       if ( this.$attrs.variation === 'linear' && this.$attrs.svgwidth > this.$attrs.svgheight ){\r\n            this.svgwidth = this.$attrs.svgwidth\r\n            this.svgheight = this.$attrs.svgheight\r\n        }\r\n        if ( this.$attrs.svgwidth > this.$attrs.svgheight ){\r\n            this.svgwidth = this.$attrs.svgheight\r\n            this.svgheight = this.$attrs.svgwidth\r\n        }\r\n        var width = parseInt(this.svgwidth) - ( this.offsetX*2 )\r\n        \r\n        //this.svgwidth = document.getElementById(this.$attrs.serial).clientWidth - this.offsetX*2\r\n        //width = this.svgwidth\r\n        this.svg = this.$refs[id]\r\n        \r\n        this.posFactor = width / parseInt(this.$attrs.max )\r\n        this.range = parseInt(this.$attrs.max ) - (parseInt(this.$attrs.min))\r\n        this.factor = width / this.range\r\n        if ( parseInt(this.$attrs.value) > parseInt(this.$attrs.max) ){\r\n            this.$attrs.value = this.$attrs.max\r\n        }\r\n        //this.pos = this.normalize(Number(this.$attrs.value))*this.posFactor\r\n        //this.pos = this.svgwidth*this.normalize(Number(this.$attrs.value))/100 - this.offsetX\r\n        this.gaugeSize()\r\n        if ( !! parseInt(this.$attrs.scale) ){\r\n            this.createScale()\r\n        }\r\n        if ( this.$attrs.zones.split(',') ){\r\n            this.limitzones = this.$attrs.zones.split(',')\r\n        }\r\n\r\n        this.aniPos[1] = this.pos//this.factor\r\n        this.calcWidth(this.$attrs.value)\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./rockiot.linear.horizontal.svg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./rockiot.linear.horizontal.svg.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./rockiot.linear.horizontal.svg.vue?vue&type=template&id=0fc1f8fe&\"\nimport script from \"./rockiot.linear.horizontal.svg.vue?vue&type=script&lang=js&\"\nexport * from \"./rockiot.linear.horizontal.svg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}